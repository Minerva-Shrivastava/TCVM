package com.yash.teacoffeevemdingmachine.serviceimpl;

import java.util.List;

import org.apache.log4j.Logger;

import com.yash.teacoffeevemdingmachine.dao.OrderDAO;
import com.yash.teacoffeevemdingmachine.domain.Order;
import com.yash.teacoffeevemdingmachine.enumeration.Drink;
import com.yash.teacoffeevemdingmachine.exception.EmptyListException;
import com.yash.teacoffeevemdingmachine.exception.NullObjectException;
import com.yash.teacoffeevemdingmachine.exception.OrderEmptyException;
import com.yash.teacoffeevemdingmachine.service.OrderService;
import com.yash.teacoffeevendingmachine.builder.BlackCoffeeBuilder;
import com.yash.teacoffeevendingmachine.builder.BlackTeaBuilder;
import com.yash.teacoffeevendingmachine.builder.CoffeeBuilder;
import com.yash.teacoffeevendingmachine.builder.IDrinkBuilder;
import com.yash.teacoffeevendingmachine.builder.TeaBuilder;

public class OrderServiceImpl implements OrderService {
	
	private OrderDAO orderDAO;
	
	private Logger logger = Logger.getLogger(OrderServiceImpl.class);
	
	public OrderServiceImpl(OrderDAO orderDAO) {
		this.orderDAO = orderDAO;
	}

	@Override
	public List<Order> getOrders() {
		logger.info("Listing the orders");
		List<Order> orders = orderDAO.getOrders();
		if(orders == null) {
			throw new NullObjectException("List of order is null");
		}
		if (orders.isEmpty()) {
			try {
				throw new OrderEmptyException("Order's list is empty");
			} catch (OrderEmptyException e) {
				e.printStackTrace();
			}
		}
		return orders;
	}

	@Override
	public List<Order> getOrdersByDrink(Drink drink) {
		List<Order> ordersListByDrink = orderDAO.getOrdersByDrink(drink);
		if (ordersListByDrink == null) {
			throw new NullPointerException("Order's list for given drink is null");
		}

		if (ordersListByDrink.isEmpty()) {
			throw new EmptyListException("Order's list for given drink is empty");
		}
		return ordersListByDrink;
	}

	@Override
	public int addOrder(Order order) {
		IDrinkBuilder drinkBuilder;
		int rowsAffected = 0;
		if(order == null) {
			throw new NullObjectException("Order object is null");
		}
		switch (order.getDrink()) {
		case TEA:
			drinkBuilder = TeaBuilder.getDrinkBuilder();
			drinkBuilder.prepareDrink(order);
			break;
		case COFFEE:
			drinkBuilder = CoffeeBuilder.getDrinkBuilder();
			drinkBuilder.prepareDrink(order);
			break;
		case BLACK_TEA:
			drinkBuilder = BlackTeaBuilder.getDrinkBuilder();
			drinkBuilder.prepareDrink(order);
			break;
		case BLACK_COFFEE:
			drinkBuilder = BlackCoffeeBuilder.getDrinkBuilder();
			drinkBuilder.prepareDrink(order);
			break;
		default:
			System.out.println("Wrong choice");
			break;
		}
		rowsAffected = orderDAO.saveOrder(order);
		return rowsAffected;
	}

	@Override
	public void getTotalSales() {
		System.out.println("Items \t Quatity \t Sale");
		Double totalSale = 0.00;
		int quantity = 0;
		Double drinkSale = 0.00;
		System.out.println("------------------------------------------------------------------");
		System.out.println("|Drink\t\t|\tQuantity\t|\tTotal Amount\t|");
		System.out.println("------------------------------------------------------------------");

		for (Drink drink : Drink.values()) {
			List<Order> orders = orderDAO.getOrdersByDrink(drink);
			if (orders.size() != 0) {
				System.out.print("|" + drink + "\t");
				for (Order order : orders) {
					quantity = quantity + order.getQuantity();
					drinkSale = drinkSale + order.getTotalAmount();

				}
				System.out.println("|\t" + quantity + "\t\t|\t" + drinkSale + "\t\t|");
			}
			totalSale = totalSale + drinkSale;
		}

		System.out.println("------------------------------------------------------------------");

		System.out.println("Total sale generated by TCVM till now is " + totalSale);
	}

}
